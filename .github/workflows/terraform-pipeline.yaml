name: Terraform Module Workflow

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
env:
  REPO_NAME: ${{ inputs.repo_name }}       
    
jobs:
  terraform-pipeline:
    name: Terraform CI/CD Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Update as per your requirement

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init

      # Step 4: Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # Step 5: Terraform Format
      - name: Terraform Format
        run: terraform fmt -check

      # Step 6: Run TFLint
      - name: Install and Run TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --version
          tflint

      # Step 7: Run SonarQube Scanner
      - name: SonarQube Scanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip -d $HOME
          export PATH="$HOME/sonar-scanner-4.8.0.2856-linux/bin:$PATH"
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.exclusions="*/tests/*" \
            -Dsonar.qualitygate.wait=true || true

      # Step 8: Terraform Plan
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
        run: terraform plan

      # Step 9: Terraform Apply
      - name: Terraform Apply
        if: ${{ github.ref_name == inputs.branch_name }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
        run: terraform apply -auto-approve
